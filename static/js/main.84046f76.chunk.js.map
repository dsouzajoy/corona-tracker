{"version":3,"sources":["components/Card/Card.js","components/Card/index.js","components/Table/Table.js","components/Table/index.js","components/Home/Home.js","components/Home/index.js","components/News/News.js","components/News/index.js","components/Footer/Footer.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","title","value","delta","className","Table","colHeaders","data","map","header","index","key","state","confirmed","toLocaleString","active","deaths","recovered","Home","useState","activeCases","setActiveCases","nationalData","setNationalData","stateData","setStateData","isLoading","setIsLoading","useEffect","tempStateData","fetch","mode","headers","then","response","json","state_data","forEach","push","Fragment","loader","width","window","innerWidth","chartType","rootProps","var","options","enableRegionInteractivity","domain","region","displayMode","resolution","colorAxis","colors","backgroundColor","datalessRegionColor","defaultColor","confirmed_cases","active_cases","recovered_cases","death_cases","to","class","News","headlines","setHeadlines","headlineSummary","setHeadlineSummary","imgLink","setImageLink","tempData","i","length","temp","concat","final","src","alt","Footer","href","rel","target","Date","getFullYear","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84046f76.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card({ title, value, delta }) {\r\n    return (\r\n        <div className={title === \"Confirmed\" ? \"card card-blue\"\r\n        : title === \"Active\" ? \"card card-red\" \r\n        : title === \"Recovered\" ? \"card card-green\" \r\n        : title === \"Deceased\" && \"card card-grey\"} >\r\n            {\r\n                title === \"Confirmed\" ? <i className=\"fas fa-virus fa-4x\"></i> \r\n                : title === \"Active\" ? <i className=\"fas fa-viruses fa-4x\"></i> \r\n                : title === \"Recovered\" ? <i className=\"fas fa-shield-virus fa-4x\"></i> \r\n                : title === \"Deceased\" && <i className=\"fas fa-skull-crossbones fa-4x\"></i> \r\n            }\r\n            \r\n            <div className=\"card-info\">\r\n                <h3>{title}</h3>\r\n                <p>{value}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import Card from \"./Card\";\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Table.css';\r\n\r\nfunction Table({colHeaders, data}) {\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                {colHeaders.map((header, index) => <th key={index}>{header}</th>)}\r\n            </tr>\r\n            </thead>\r\n            <tbody>      \r\n                {data.map((state, index) => <tr key={index}>\r\n                    <td>{state.state === \"IN-UT\" ? \"Uttarakhand\" : state.state === \"IN-AN\" ? \"Andaman and Nicobar\" : state.state === \"Orissa\" ? \"Odisha\" : state.state}</td>\r\n                    <td>{state.confirmed.toLocaleString('en-IN')}</td>\r\n                    <td>{state.active.toLocaleString('en-IN')}</td>\r\n                    <td>{state.deaths.toLocaleString('en-IN')}</td>\r\n                    <td>{state.recovered.toLocaleString('en-IN')}</td>\r\n                </tr>)}        \r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;","import Table from \"./Table\";\r\n\r\nexport default Table;","import React, { useEffect, useState } from 'react';\r\nimport './Home.css';\r\nimport { Chart } from \"react-google-charts\";\r\nimport Card from \"../Card\";\r\nimport Table from \"../Table\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  const [activeCases, setActiveCases] = useState([[\"State\", \"Cases\", \"Display\"]]);\r\n  const [nationalData, setNationalData] = useState({});\r\n  const [stateData, setStateData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    let tempStateData = [[\"State\", \"Active Cases\"]];\r\n    fetch(\"https://stats-corona.herokuapp.com/all\", {\r\n      mode: 'cors', headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(response => response.json()).then(data => {\r\n      setNationalData(data[0]);\r\n      setStateData(data[1].state_data);\r\n      data[1].state_data.forEach(state => {\r\n        if (state.state === \"Odisha\") {\r\n          state.state = \"Orissa\";\r\n        } else if (state.state === \"Uttarakhand\") {\r\n          state.state = \"IN-UT\"\r\n        } else if (state.state === \"Andaman and Nicobar\") {\r\n          state.state = \"IN-AN\"\r\n        }\r\n        tempStateData.push([state.state, state.active]);\r\n      });\r\n      setActiveCases(tempStateData);\r\n      setIsLoading(false);\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {\r\n        isLoading ? <span className=\"loader\">Loading...</span> : <React.Fragment><div className=\"chart-container\">\r\n          <h3 className=\"chart-heading\">State wise active cases</h3>\r\n          <Chart\r\n            loader={<span>Loading...</span>}\r\n            width={window.innerWidth < 600 ? window.innerWidth : 600}\r\n            chartType=\"GeoChart\"\r\n            data={activeCases}\r\n            rootProps={{ 'data-testid': '1' }}\r\n            var options={{\r\n              enableRegionInteractivity: true,\r\n              domain: 'IN',\r\n              region: 'IN', // India \r\n              displayMode: 'regions', \r\n              resolution: 'provinces', \r\n              colorAxis: {\r\n                colors: ['#fff', '#ffac7f', '#ff7a33', '#ff5900', '#cc4700']\r\n              },\r\n              backgroundColor: 'transparent',\r\n              datalessRegionColor: '#123456',\r\n              defaultColor: '#ccc',\r\n            }}\r\n          />\r\n          <span className=\"text-sorry\"><i className=\"fas fa-heart-broken\"></i>&nbsp;we regret the discrepancies in visualizing the borders of certain states/union territories we are working on his issue  </span>\r\n          <span className=\"text-info\"><i className=\"fa fa-info-circle\"></i>&nbsp;Click on a state to see its active cases.</span>\r\n        </div>\r\n        <div className=\"cards-container\">\r\n          <Card title={\"Confirmed\"} value={nationalData.confirmed_cases.toLocaleString('en-IN')}/>\r\n          <Card title={\"Active\"} value={nationalData.active_cases.toLocaleString('en-IN')}/>\r\n          <Card title={\"Recovered\"} value={nationalData.recovered_cases.toLocaleString('en-IN')}/>\r\n          <Card title={\"Deceased\"} value={nationalData.death_cases.toLocaleString('en-IN')}/>\r\n        </div>\r\n        <span className=\"text-table-info\"><i className=\"fa fa-info-circle\"></i>&nbsp;Scroll on the table too see all details</span>\r\n        <div className=\"table-container\">\r\n          <Table colHeaders={[\"State\", \"Confirmed\", \"Active\", \"Deaths\", \"Recovered\"]} data={stateData}/>\r\n        </div> \r\n        <Link to=\"/news\" className=\"btn-link\"> News Updates &nbsp; <i class=\"fas fa-arrow-right\"></i></Link>\r\n        </React.Fragment>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\nimport './News.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction News() {\r\n\r\n  const [headlines, setHeadlines] = useState([]);\r\n  const [headlineSummary, setHeadlineSummary] = useState([]);\r\n  const [imgLink, setImageLink] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(\"https://stats-corona.herokuapp.com/headlines\", {\r\n      mode: 'cors', headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(response => response.json()).then(data => {\r\n      setHeadlines(data['headlines']);\r\n      setHeadlineSummary(data['headlines_summary']);\r\n      setImageLink(data['image_link']);\r\n      setIsLoading(false);\r\n    })\r\n  }, [])\r\n  var tempData = [];\r\n  for (let i = 0; i < headlines.length; i++) {\r\n    let temp = [imgLink[i], headlines[i], headlineSummary[i]]\r\n    tempData = tempData.concat([temp]);\r\n  }\r\n  const final = [];\r\n  tempData.forEach((data, index) => {\r\n\r\n    final.push(\r\n      <div className=\"news-card\" key={index}>\r\n        <img className=\"news-img\" src={data[0]} alt=\"news-thunmbnail\" />\r\n        <div className=\"news-card-body\">\r\n          <h3 className=\"news-card-title\">{data[1]}</h3>\r\n          <p className=\"news-card-text\">{data[2]}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  })\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        isLoading ? <span className=\"loader\">Loading...</span> : <React.Fragment><div className=\"verification-text\"><i className=\"fas fa-check-circle\"></i> &nbsp; Verified news just for you</div>\r\n          <div className=\"news\">\r\n            {final}\r\n          </div>\r\n          <Link to=\"/\" className=\"btn-link\"> <i className=\"fas fa-arrow-left\"></i> &nbsp; Home &nbsp; </Link>\r\n        </React.Fragment>\r\n      }\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default News;\r\n","import News from \"./News\";\r\n\r\nexport default News;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"authors\">\r\n                Crafted by <a href=\"http://joydsouza.me/portfolio\" rel=\"noopener noreferrer\" target=\"_blank\" className=\"footer-link\">Joy Dsouza</a>, <a href=\"https://www.linkedin.com/in/praneethrk\"  rel=\"noopener noreferrer\"  target=\"_blank\"  className=\"footer-link\">Praneeth RK</a> and <a href=\"https://www.linkedin.com/in/niranjan-malya-075525122\"  rel=\"noopener noreferrer\"  target=\"_blank\"  className=\"footer-link\">Niranjan Malya</a> while maintaining social distance and following necessary precautions.\r\n            </div>\r\n            <div className=\"copyrights\">\r\n                &copy; {new Date().getFullYear()} All Rights Reserved.\r\n            </div>\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default Footer;","import Footer from \"./Footer\";\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Home from \"./components/Home\";\nimport News from \"./components/News\";\nimport Footer from \"./components/Footer\";\nimport {Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/news\" component={News} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}